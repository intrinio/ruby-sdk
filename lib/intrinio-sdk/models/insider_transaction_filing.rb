=begin
#Intrinio API

#Welcome to the Intrinio API! Through our Financial Data Marketplace, we offer a wide selection of financial data feed APIs sourced by our own proprietary processes as well as from many data vendors. For a complete API request / response reference please view the [Intrinio API documentation](https://docs.intrinio.com/documentation/api_v2). If you need additional help in using the API, please visit the [Intrinio website](https://intrinio.com) and click on the chat icon in the lower right corner.

OpenAPI spec version: 2.107.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require 'date'

module Intrinio
  # An insider transaction SEC filing and its associated transactions
  class InsiderTransactionFiling
    # The date of the filing with the SEC made by the owner
    attr_accessor :filing_date

    # The URL of the filing with the SEC
    attr_accessor :filing_url

    # The ticker of the issuing company.
    attr_accessor :issuer_ticker

    # The Central Index Key (CIK) of the issuing company.
    attr_accessor :issuer_cik

    # The name of the issuing company.
    attr_accessor :issuer_company

    # The insider transactions associated with the filing
    attr_accessor :transactions

    # The company associated with the filing
    attr_accessor :company

    # The owner associated with the filing
    attr_accessor :owner


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'filing_date' => :'filing_date',
        :'filing_url' => :'filing_url',
        :'issuer_ticker' => :'issuer_ticker',
        :'issuer_cik' => :'issuer_cik',
        :'issuer_company' => :'issuer_company',
        :'transactions' => :'transactions',
        :'company' => :'company',
        :'owner' => :'owner'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'filing_date' => :'Date',
        :'filing_url' => :'String',
        :'issuer_ticker' => :'String',
        :'issuer_cik' => :'String',
        :'issuer_company' => :'String',
        :'transactions' => :'Array<InsiderTransaction>',
        :'company' => :'CompanySummary',
        :'owner' => :'OwnerSummary'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'filing_date')
        self.filing_date = attributes[:'filing_date']
      end

      if attributes.has_key?(:'filing_url')
        self.filing_url = attributes[:'filing_url']
      end

      if attributes.has_key?(:'issuer_ticker')
        self.issuer_ticker = attributes[:'issuer_ticker']
      end

      if attributes.has_key?(:'issuer_cik')
        self.issuer_cik = attributes[:'issuer_cik']
      end

      if attributes.has_key?(:'issuer_company')
        self.issuer_company = attributes[:'issuer_company']
      end

      if attributes.has_key?(:'transactions')
        if (value = attributes[:'transactions']).is_a?(Array)
          self.transactions = value
        end
      end

      if attributes.has_key?(:'company')
        self.company = attributes[:'company']
      end

      if attributes.has_key?(:'owner')
        self.owner = attributes[:'owner']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          filing_date == o.filing_date &&
          filing_url == o.filing_url &&
          issuer_ticker == o.issuer_ticker &&
          issuer_cik == o.issuer_cik &&
          issuer_company == o.issuer_company &&
          transactions == o.transactions &&
          company == o.company &&
          owner == o.owner
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [filing_date, filing_url, issuer_ticker, issuer_cik, issuer_company, transactions, company, owner].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Intrinio.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
