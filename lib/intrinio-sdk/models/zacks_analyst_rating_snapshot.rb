=begin
#Intrinio API

#Welcome to the Intrinio API! Through our Financial Data Marketplace, we offer a wide selection of financial data feed APIs sourced by our own proprietary processes as well as from many data vendors. For a complete API request / response reference please view the [Intrinio API documentation](https://docs.intrinio.com/documentation/api_v2). If you need additional help in using the API, please visit the [Intrinio website](https://intrinio.com) and click on the chat icon in the lower right corner.

OpenAPI spec version: 2.70.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require 'date'

module Intrinio
  # A snapshot of ratings data compared with previous timeframes. This includes mean percentiles for comparing one security to the universe of securities covered by Zacks analyst ratings, at a specific point in time.
  class ZacksAnalystRatingSnapshot
    # The snapshot type, signifying the age of the ratings data from the snapshot date.
    attr_accessor :type

    # The date of the snapshot, when data was recorded.
    attr_accessor :snapshot_date

    # The date of the latest rating for the snapshot timeframe. This is the effective date of the ratings data.
    attr_accessor :rating_date

    # The mean (average) weighing of analyst recommendations, from 1 (strong buy) to 5 (strong sell).
    attr_accessor :mean

    # The percentile of the mean, derived by comparing to all securities rated by analysts as of the rating date, ranging 0.0 (strong buy) to 1.0 (strong sell).
    attr_accessor :percentile

    # The number of analysts recommending Strong Buy.
    attr_accessor :strong_buys

    # The number of analysts recommending Buy.
    attr_accessor :buys

    # The number of analysts recommending Hold.
    attr_accessor :holds

    # The number of analysts recommending Sell.
    attr_accessor :sells

    # The number of analysts recommending Strong Sell.
    attr_accessor :strong_sells

    # The total number of analysts recommendations.
    attr_accessor :total


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'type',
        :'snapshot_date' => :'snapshot_date',
        :'rating_date' => :'rating_date',
        :'mean' => :'mean',
        :'percentile' => :'percentile',
        :'strong_buys' => :'strong_buys',
        :'buys' => :'buys',
        :'holds' => :'holds',
        :'sells' => :'sells',
        :'strong_sells' => :'strong_sells',
        :'total' => :'total'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'type' => :'String',
        :'snapshot_date' => :'Date',
        :'rating_date' => :'Date',
        :'mean' => :'Float',
        :'percentile' => :'Float',
        :'strong_buys' => :'Integer',
        :'buys' => :'Integer',
        :'holds' => :'Integer',
        :'sells' => :'Integer',
        :'strong_sells' => :'Integer',
        :'total' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'snapshot_date')
        self.snapshot_date = attributes[:'snapshot_date']
      end

      if attributes.has_key?(:'rating_date')
        self.rating_date = attributes[:'rating_date']
      end

      if attributes.has_key?(:'mean')
        self.mean = attributes[:'mean']
      end

      if attributes.has_key?(:'percentile')
        self.percentile = attributes[:'percentile']
      end

      if attributes.has_key?(:'strong_buys')
        self.strong_buys = attributes[:'strong_buys']
      end

      if attributes.has_key?(:'buys')
        self.buys = attributes[:'buys']
      end

      if attributes.has_key?(:'holds')
        self.holds = attributes[:'holds']
      end

      if attributes.has_key?(:'sells')
        self.sells = attributes[:'sells']
      end

      if attributes.has_key?(:'strong_sells')
        self.strong_sells = attributes[:'strong_sells']
      end

      if attributes.has_key?(:'total')
        self.total = attributes[:'total']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          snapshot_date == o.snapshot_date &&
          rating_date == o.rating_date &&
          mean == o.mean &&
          percentile == o.percentile &&
          strong_buys == o.strong_buys &&
          buys == o.buys &&
          holds == o.holds &&
          sells == o.sells &&
          strong_sells == o.strong_sells &&
          total == o.total
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [type, snapshot_date, rating_date, mean, percentile, strong_buys, buys, holds, sells, strong_sells, total].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Intrinio.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
