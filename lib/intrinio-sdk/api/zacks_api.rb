=begin
#Intrinio API

#Welcome to the Intrinio API! Through our Financial Data Marketplace, we offer a wide selection of financial data feed APIs sourced by our own proprietary processes as well as from many data vendors. For a complete API request / response reference please view the [Intrinio API documentation](https://docs.intrinio.com/documentation/api_v2). If you need additional help in using the API, please visit the [Intrinio website](https://intrinio.com) and click on the chat icon in the lower right corner.

OpenAPI spec version: 2.100.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require "uri"

module Intrinio
  class ZacksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Zacks Analyst Ratings
    # This database offers consensus analyst recommendations for over 5,000 US and Canadian listed companies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
    # @option opts [Date] :start_date Limit ratings to those on or after this date
    # @option opts [Date] :end_date Limit ratings to those on or before this date
    # @option opts [Float] :mean_greater Return only records with a mean (average) higher than this value
    # @option opts [Float] :mean_less Return only records with a mean (average) lower than this value
    # @option opts [Integer] :strong_buys_greater Return only records with more than this many Strong Buy recommendations
    # @option opts [Integer] :strong_buys_less Return only records with fewer than this many Strong Buy recommendations
    # @option opts [Integer] :buys_greater Return only records with more than this many Buy recommendations
    # @option opts [Integer] :buys_less Return only records with fewer than this many Buy recommendations
    # @option opts [Integer] :holds_greater Return only records with more than this many Hold recommendations
    # @option opts [Integer] :holds_less Return only records with fewer than this many Hold recommendations
    # @option opts [Integer] :sells_greater Return only records with more than this many Sell recommendations
    # @option opts [Integer] :sells_less Return only records with fewer than this many Sell recommendations
    # @option opts [Integer] :strong_sells_greater Return only records with more than this many Strong Sell recommendations
    # @option opts [Integer] :strong_sells_less Return only records with fewer than this many Strong Sell recommendations
    # @option opts [Integer] :total_greater Return only records with more than this many recommendations, regardless of type
    # @option opts [Integer] :total_less Return only records with fewer than this many recommendations, regardless of type
    # @option opts [Integer] :page_size The number of results to return (default to 100)
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseZacksAnalystRatings]
    def get_zacks_analyst_ratings(opts = {})
      data, _status_code, _headers = get_zacks_analyst_ratings_with_http_info(opts)
      return data
    end

    # Zacks Analyst Ratings
    # This database offers consensus analyst recommendations for over 5,000 US and Canadian listed companies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
    # @option opts [Date] :start_date Limit ratings to those on or after this date
    # @option opts [Date] :end_date Limit ratings to those on or before this date
    # @option opts [Float] :mean_greater Return only records with a mean (average) higher than this value
    # @option opts [Float] :mean_less Return only records with a mean (average) lower than this value
    # @option opts [Integer] :strong_buys_greater Return only records with more than this many Strong Buy recommendations
    # @option opts [Integer] :strong_buys_less Return only records with fewer than this many Strong Buy recommendations
    # @option opts [Integer] :buys_greater Return only records with more than this many Buy recommendations
    # @option opts [Integer] :buys_less Return only records with fewer than this many Buy recommendations
    # @option opts [Integer] :holds_greater Return only records with more than this many Hold recommendations
    # @option opts [Integer] :holds_less Return only records with fewer than this many Hold recommendations
    # @option opts [Integer] :sells_greater Return only records with more than this many Sell recommendations
    # @option opts [Integer] :sells_less Return only records with fewer than this many Sell recommendations
    # @option opts [Integer] :strong_sells_greater Return only records with more than this many Strong Sell recommendations
    # @option opts [Integer] :strong_sells_less Return only records with fewer than this many Strong Sell recommendations
    # @option opts [Integer] :total_greater Return only records with more than this many recommendations, regardless of type
    # @option opts [Integer] :total_less Return only records with fewer than this many recommendations, regardless of type
    # @option opts [Integer] :page_size The number of results to return
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseZacksAnalystRatings, Fixnum, Hash)>] ApiResponseZacksAnalystRatings data, response status code and response headers
    def get_zacks_analyst_ratings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZacksApi.get_zacks_analyst_ratings ..."
      end
      if @api_client.config.client_side_validation && !opts[:'mean_greater'].nil? && opts[:'mean_greater'] > 5
        fail ArgumentError, 'invalid value for "opts[:"mean_greater"]" when calling ZacksApi.get_zacks_analyst_ratings, must be smaller than or equal to 5.'
      end

      if @api_client.config.client_side_validation && !opts[:'mean_greater'].nil? && opts[:'mean_greater'] < 1
        fail ArgumentError, 'invalid value for "opts[:"mean_greater"]" when calling ZacksApi.get_zacks_analyst_ratings, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'mean_less'].nil? && opts[:'mean_less'] > 5
        fail ArgumentError, 'invalid value for "opts[:"mean_less"]" when calling ZacksApi.get_zacks_analyst_ratings, must be smaller than or equal to 5.'
      end

      if @api_client.config.client_side_validation && !opts[:'mean_less'].nil? && opts[:'mean_less'] < 1
        fail ArgumentError, 'invalid value for "opts[:"mean_less"]" when calling ZacksApi.get_zacks_analyst_ratings, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'strong_buys_greater'].nil? && opts[:'strong_buys_greater'] < 0
        fail ArgumentError, 'invalid value for "opts[:"strong_buys_greater"]" when calling ZacksApi.get_zacks_analyst_ratings, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'strong_buys_less'].nil? && opts[:'strong_buys_less'] < 0
        fail ArgumentError, 'invalid value for "opts[:"strong_buys_less"]" when calling ZacksApi.get_zacks_analyst_ratings, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'buys_greater'].nil? && opts[:'buys_greater'] < 0
        fail ArgumentError, 'invalid value for "opts[:"buys_greater"]" when calling ZacksApi.get_zacks_analyst_ratings, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'buys_less'].nil? && opts[:'buys_less'] < 0
        fail ArgumentError, 'invalid value for "opts[:"buys_less"]" when calling ZacksApi.get_zacks_analyst_ratings, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'holds_greater'].nil? && opts[:'holds_greater'] < 0
        fail ArgumentError, 'invalid value for "opts[:"holds_greater"]" when calling ZacksApi.get_zacks_analyst_ratings, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'holds_less'].nil? && opts[:'holds_less'] < 0
        fail ArgumentError, 'invalid value for "opts[:"holds_less"]" when calling ZacksApi.get_zacks_analyst_ratings, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'sells_greater'].nil? && opts[:'sells_greater'] < 0
        fail ArgumentError, 'invalid value for "opts[:"sells_greater"]" when calling ZacksApi.get_zacks_analyst_ratings, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'sells_less'].nil? && opts[:'sells_less'] < 0
        fail ArgumentError, 'invalid value for "opts[:"sells_less"]" when calling ZacksApi.get_zacks_analyst_ratings, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'strong_sells_greater'].nil? && opts[:'strong_sells_greater'] < 0
        fail ArgumentError, 'invalid value for "opts[:"strong_sells_greater"]" when calling ZacksApi.get_zacks_analyst_ratings, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'strong_sells_less'].nil? && opts[:'strong_sells_less'] < 0
        fail ArgumentError, 'invalid value for "opts[:"strong_sells_less"]" when calling ZacksApi.get_zacks_analyst_ratings, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'total_greater'].nil? && opts[:'total_greater'] < 0
        fail ArgumentError, 'invalid value for "opts[:"total_greater"]" when calling ZacksApi.get_zacks_analyst_ratings, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'total_less'].nil? && opts[:'total_less'] < 0
        fail ArgumentError, 'invalid value for "opts[:"total_less"]" when calling ZacksApi.get_zacks_analyst_ratings, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ZacksApi.get_zacks_analyst_ratings, must be smaller than or equal to 10000.'
      end

      # resource path
      local_var_path = "/zacks/analyst_ratings"

      # query parameters
      query_params = {}
      query_params[:'identifier'] = opts[:'identifier'] if !opts[:'identifier'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'mean_greater'] = opts[:'mean_greater'] if !opts[:'mean_greater'].nil?
      query_params[:'mean_less'] = opts[:'mean_less'] if !opts[:'mean_less'].nil?
      query_params[:'strong_buys_greater'] = opts[:'strong_buys_greater'] if !opts[:'strong_buys_greater'].nil?
      query_params[:'strong_buys_less'] = opts[:'strong_buys_less'] if !opts[:'strong_buys_less'].nil?
      query_params[:'buys_greater'] = opts[:'buys_greater'] if !opts[:'buys_greater'].nil?
      query_params[:'buys_less'] = opts[:'buys_less'] if !opts[:'buys_less'].nil?
      query_params[:'holds_greater'] = opts[:'holds_greater'] if !opts[:'holds_greater'].nil?
      query_params[:'holds_less'] = opts[:'holds_less'] if !opts[:'holds_less'].nil?
      query_params[:'sells_greater'] = opts[:'sells_greater'] if !opts[:'sells_greater'].nil?
      query_params[:'sells_less'] = opts[:'sells_less'] if !opts[:'sells_less'].nil?
      query_params[:'strong_sells_greater'] = opts[:'strong_sells_greater'] if !opts[:'strong_sells_greater'].nil?
      query_params[:'strong_sells_less'] = opts[:'strong_sells_less'] if !opts[:'strong_sells_less'].nil?
      query_params[:'total_greater'] = opts[:'total_greater'] if !opts[:'total_greater'].nil?
      query_params[:'total_less'] = opts[:'total_less'] if !opts[:'total_less'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseZacksAnalystRatings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZacksApi#get_zacks_analyst_ratings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Zacks EBITDA Consensus
    # This database offers consensus EBITDA-related estimates for over 4,000 US and Canadian listed companies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier A Company identifier (Ticker, CIK, LEI, Intrinio ID)
    # @option opts [String] :type Limit EBITDA estimates to this type
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseZacksEBITDAConsensus]
    def get_zacks_ebitda_consensus(opts = {})
      data, _status_code, _headers = get_zacks_ebitda_consensus_with_http_info(opts)
      return data
    end

    # Zacks EBITDA Consensus
    # This database offers consensus EBITDA-related estimates for over 4,000 US and Canadian listed companies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier A Company identifier (Ticker, CIK, LEI, Intrinio ID)
    # @option opts [String] :type Limit EBITDA estimates to this type
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseZacksEBITDAConsensus, Fixnum, Hash)>] ApiResponseZacksEBITDAConsensus data, response status code and response headers
    def get_zacks_ebitda_consensus_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZacksApi.get_zacks_ebitda_consensus ..."
      end
      # resource path
      local_var_path = "/zacks/ebitda_consensus"

      # query parameters
      query_params = {}
      query_params[:'identifier'] = opts[:'identifier'] if !opts[:'identifier'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseZacksEBITDAConsensus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZacksApi#get_zacks_ebitda_consensus\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Zacks EPS Estimates
    # This database offers consensus earnings estimates for over 5,000 US and Canadian listed companies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier A Company identifier (Ticker, CIK, LEI, Intrinio ID)
    # @option opts [Date] :start_date Limit EPS estimates to those on or after this date
    # @option opts [Date] :end_date Limit EPS estimates to those on or before this date
    # @option opts [Integer] :fiscal_year Only for the given fiscal year
    # @option opts [String] :fiscal_period The fiscal period
    # @option opts [Integer] :calendar_year Only for the given calendar year
    # @option opts [String] :calendar_period The calendar period
    # @option opts [Integer] :page_size The number of results to return (default to 100)
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseZacksEPSEstimates]
    def get_zacks_eps_estimates(opts = {})
      data, _status_code, _headers = get_zacks_eps_estimates_with_http_info(opts)
      return data
    end

    # Zacks EPS Estimates
    # This database offers consensus earnings estimates for over 5,000 US and Canadian listed companies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier A Company identifier (Ticker, CIK, LEI, Intrinio ID)
    # @option opts [Date] :start_date Limit EPS estimates to those on or after this date
    # @option opts [Date] :end_date Limit EPS estimates to those on or before this date
    # @option opts [Integer] :fiscal_year Only for the given fiscal year
    # @option opts [String] :fiscal_period The fiscal period
    # @option opts [Integer] :calendar_year Only for the given calendar year
    # @option opts [String] :calendar_period The calendar period
    # @option opts [Integer] :page_size The number of results to return
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseZacksEPSEstimates, Fixnum, Hash)>] ApiResponseZacksEPSEstimates data, response status code and response headers
    def get_zacks_eps_estimates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZacksApi.get_zacks_eps_estimates ..."
      end
      if @api_client.config.client_side_validation && opts[:'fiscal_period'] && !['Q1TTM', 'Q2TTM', 'Q3TTM', 'FY', 'Q1', 'Q2', 'Q3', 'Q4', 'Q2YTD', 'Q3YTD'].include?(opts[:'fiscal_period'])
        fail ArgumentError, 'invalid value for "fiscal_period", must be one of Q1TTM, Q2TTM, Q3TTM, FY, Q1, Q2, Q3, Q4, Q2YTD, Q3YTD'
      end
      if @api_client.config.client_side_validation && opts[:'calendar_period'] && !['Q1TTM', 'Q2TTM', 'Q3TTM', 'FY', 'Q1', 'Q2', 'Q3', 'Q4', 'Q2YTD', 'Q3YTD'].include?(opts[:'calendar_period'])
        fail ArgumentError, 'invalid value for "calendar_period", must be one of Q1TTM, Q2TTM, Q3TTM, FY, Q1, Q2, Q3, Q4, Q2YTD, Q3YTD'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ZacksApi.get_zacks_eps_estimates, must be smaller than or equal to 10000.'
      end

      # resource path
      local_var_path = "/zacks/eps_estimates"

      # query parameters
      query_params = {}
      query_params[:'identifier'] = opts[:'identifier'] if !opts[:'identifier'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'fiscal_year'] = opts[:'fiscal_year'] if !opts[:'fiscal_year'].nil?
      query_params[:'fiscal_period'] = opts[:'fiscal_period'] if !opts[:'fiscal_period'].nil?
      query_params[:'calendar_year'] = opts[:'calendar_year'] if !opts[:'calendar_year'].nil?
      query_params[:'calendar_period'] = opts[:'calendar_period'] if !opts[:'calendar_period'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseZacksEPSEstimates')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZacksApi#get_zacks_eps_estimates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Zacks EPS Growth Rates
    # This database offers consensus EPS growth rate estimates, comparing company estimates to historical company estimates, industry estimates, and S&P 500 index estimates.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company Filings for the given &#x60;company&#x60; identifier (ticker, CIK, LEI, Intrinio ID)
    # @option opts [String] :industry_group_name Return only growth rates for companies in the given Zacks industry group name
    # @option opts [String] :industry_group_number Return only growth rates for companies in the given Zacks industry group number
    # @option opts [Integer] :page_size The number of results to return (default to 100)
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseZacksEPSGrowthRates]
    def get_zacks_eps_growth_rates(opts = {})
      data, _status_code, _headers = get_zacks_eps_growth_rates_with_http_info(opts)
      return data
    end

    # Zacks EPS Growth Rates
    # This database offers consensus EPS growth rate estimates, comparing company estimates to historical company estimates, industry estimates, and S&amp;P 500 index estimates.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company Filings for the given &#x60;company&#x60; identifier (ticker, CIK, LEI, Intrinio ID)
    # @option opts [String] :industry_group_name Return only growth rates for companies in the given Zacks industry group name
    # @option opts [String] :industry_group_number Return only growth rates for companies in the given Zacks industry group number
    # @option opts [Integer] :page_size The number of results to return
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseZacksEPSGrowthRates, Fixnum, Hash)>] ApiResponseZacksEPSGrowthRates data, response status code and response headers
    def get_zacks_eps_growth_rates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZacksApi.get_zacks_eps_growth_rates ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ZacksApi.get_zacks_eps_growth_rates, must be smaller than or equal to 10000.'
      end

      # resource path
      local_var_path = "/zacks/eps_growth_rates"

      # query parameters
      query_params = {}
      query_params[:'company'] = opts[:'company'] if !opts[:'company'].nil?
      query_params[:'industry_group_name'] = opts[:'industry_group_name'] if !opts[:'industry_group_name'].nil?
      query_params[:'industry_group_number'] = opts[:'industry_group_number'] if !opts[:'industry_group_number'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseZacksEPSGrowthRates')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZacksApi#get_zacks_eps_growth_rates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Zacks EPS Surprises
    # This database returns historical estimated and actual earnings, guidance, and announcement dates for 17,000+ US and Canadian listed companies.
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :start_date Limit EPS surprises to those on or after this date
    # @option opts [Date] :end_date Limit EPS surprises to those on or before this date
    # @option opts [Float] :eps_actual_greater Return only records with an actual EPS higher than this value
    # @option opts [Float] :eps_actual_less Return only records with an actual EPS lower than this value
    # @option opts [Float] :eps_mean_estimate_greater Return only records with an EPS mean estimate greater than this value
    # @option opts [Float] :eps_mean_estimate_less Return only records with an EPS mean estimate lower than this value
    # @option opts [Float] :eps_amount_diff_greater Return only records with an EPS amount difference greater than this value
    # @option opts [Float] :eps_amount_diff_less Return only records with an EPS amount difference less than this value
    # @option opts [Float] :eps_percent_diff_greater Return only records with an EPS percent difference greater than this value
    # @option opts [Float] :eps_percent_diff_less Return only records with an EPS percent difference less than this value
    # @option opts [Float] :eps_count_estimate_greater Return only records with an EPS count estimate greater than this value
    # @option opts [Float] :eps_count_estimate_less Return only records with an EPS count estimate less than this value
    # @option opts [Float] :eps_std_dev_estimate_greater Return only records with an EPS standard deviation greater than this value
    # @option opts [Float] :eps_std_dev_estimate_less Return only records with an EPS standard deviation less than this value
    # @option opts [Integer] :page_size The number of results to return (default to 100)
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseZacksEPSSurprises]
    def get_zacks_eps_surprises(opts = {})
      data, _status_code, _headers = get_zacks_eps_surprises_with_http_info(opts)
      return data
    end

    # Zacks EPS Surprises
    # This database returns historical estimated and actual earnings, guidance, and announcement dates for 17,000+ US and Canadian listed companies.
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :start_date Limit EPS surprises to those on or after this date
    # @option opts [Date] :end_date Limit EPS surprises to those on or before this date
    # @option opts [Float] :eps_actual_greater Return only records with an actual EPS higher than this value
    # @option opts [Float] :eps_actual_less Return only records with an actual EPS lower than this value
    # @option opts [Float] :eps_mean_estimate_greater Return only records with an EPS mean estimate greater than this value
    # @option opts [Float] :eps_mean_estimate_less Return only records with an EPS mean estimate lower than this value
    # @option opts [Float] :eps_amount_diff_greater Return only records with an EPS amount difference greater than this value
    # @option opts [Float] :eps_amount_diff_less Return only records with an EPS amount difference less than this value
    # @option opts [Float] :eps_percent_diff_greater Return only records with an EPS percent difference greater than this value
    # @option opts [Float] :eps_percent_diff_less Return only records with an EPS percent difference less than this value
    # @option opts [Float] :eps_count_estimate_greater Return only records with an EPS count estimate greater than this value
    # @option opts [Float] :eps_count_estimate_less Return only records with an EPS count estimate less than this value
    # @option opts [Float] :eps_std_dev_estimate_greater Return only records with an EPS standard deviation greater than this value
    # @option opts [Float] :eps_std_dev_estimate_less Return only records with an EPS standard deviation less than this value
    # @option opts [Integer] :page_size The number of results to return
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseZacksEPSSurprises, Fixnum, Hash)>] ApiResponseZacksEPSSurprises data, response status code and response headers
    def get_zacks_eps_surprises_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZacksApi.get_zacks_eps_surprises ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ZacksApi.get_zacks_eps_surprises, must be smaller than or equal to 10000.'
      end

      # resource path
      local_var_path = "/zacks/eps_surprises"

      # query parameters
      query_params = {}
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'eps_actual_greater'] = opts[:'eps_actual_greater'] if !opts[:'eps_actual_greater'].nil?
      query_params[:'eps_actual_less'] = opts[:'eps_actual_less'] if !opts[:'eps_actual_less'].nil?
      query_params[:'eps_mean_estimate_greater'] = opts[:'eps_mean_estimate_greater'] if !opts[:'eps_mean_estimate_greater'].nil?
      query_params[:'eps_mean_estimate_less'] = opts[:'eps_mean_estimate_less'] if !opts[:'eps_mean_estimate_less'].nil?
      query_params[:'eps_amount_diff_greater'] = opts[:'eps_amount_diff_greater'] if !opts[:'eps_amount_diff_greater'].nil?
      query_params[:'eps_amount_diff_less'] = opts[:'eps_amount_diff_less'] if !opts[:'eps_amount_diff_less'].nil?
      query_params[:'eps_percent_diff_greater'] = opts[:'eps_percent_diff_greater'] if !opts[:'eps_percent_diff_greater'].nil?
      query_params[:'eps_percent_diff_less'] = opts[:'eps_percent_diff_less'] if !opts[:'eps_percent_diff_less'].nil?
      query_params[:'eps_count_estimate_greater'] = opts[:'eps_count_estimate_greater'] if !opts[:'eps_count_estimate_greater'].nil?
      query_params[:'eps_count_estimate_less'] = opts[:'eps_count_estimate_less'] if !opts[:'eps_count_estimate_less'].nil?
      query_params[:'eps_std_dev_estimate_greater'] = opts[:'eps_std_dev_estimate_greater'] if !opts[:'eps_std_dev_estimate_greater'].nil?
      query_params[:'eps_std_dev_estimate_less'] = opts[:'eps_std_dev_estimate_less'] if !opts[:'eps_std_dev_estimate_less'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseZacksEPSSurprises')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZacksApi#get_zacks_eps_surprises\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Zacks ETF Holdings
    # Returns Zacks ETF holdings data
    # @param [Hash] opts the optional parameters
    # @option opts [String] :etf_ticker Return holdings of the ETF with the given ticker
    # @option opts [String] :holding_symbol Return holdings where the instrument being held has the given trading symbol
    # @option opts [Float] :weight_greater Return on the holdings with a weight greater than
    # @option opts [Float] :weight_less Return on the holdings with a weight less than
    # @option opts [Integer] :page_size The number of results to return (default to 100)
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseZacksETFHoldings]
    def get_zacks_etf_holdings(opts = {})
      data, _status_code, _headers = get_zacks_etf_holdings_with_http_info(opts)
      return data
    end

    # Zacks ETF Holdings
    # Returns Zacks ETF holdings data
    # @param [Hash] opts the optional parameters
    # @option opts [String] :etf_ticker Return holdings of the ETF with the given ticker
    # @option opts [String] :holding_symbol Return holdings where the instrument being held has the given trading symbol
    # @option opts [Float] :weight_greater Return on the holdings with a weight greater than
    # @option opts [Float] :weight_less Return on the holdings with a weight less than
    # @option opts [Integer] :page_size The number of results to return
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseZacksETFHoldings, Fixnum, Hash)>] ApiResponseZacksETFHoldings data, response status code and response headers
    def get_zacks_etf_holdings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZacksApi.get_zacks_etf_holdings ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ZacksApi.get_zacks_etf_holdings, must be smaller than or equal to 10000.'
      end

      # resource path
      local_var_path = "/zacks/etf_holdings"

      # query parameters
      query_params = {}
      query_params[:'etf_ticker'] = opts[:'etf_ticker'] if !opts[:'etf_ticker'].nil?
      query_params[:'holding_symbol'] = opts[:'holding_symbol'] if !opts[:'holding_symbol'].nil?
      query_params[:'weight_greater'] = opts[:'weight_greater'] if !opts[:'weight_greater'].nil?
      query_params[:'weight_less'] = opts[:'weight_less'] if !opts[:'weight_less'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseZacksETFHoldings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZacksApi#get_zacks_etf_holdings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Zacks Forward PE Estimates
    # This database offers price-to-earning ratio estimates for over 4,000 US and Canadian listed companies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseZacksForwardPEs]
    def get_zacks_forward_pe(opts = {})
      data, _status_code, _headers = get_zacks_forward_pe_with_http_info(opts)
      return data
    end

    # Zacks Forward PE Estimates
    # This database offers price-to-earning ratio estimates for over 4,000 US and Canadian listed companies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseZacksForwardPEs, Fixnum, Hash)>] ApiResponseZacksForwardPEs data, response status code and response headers
    def get_zacks_forward_pe_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZacksApi.get_zacks_forward_pe ..."
      end
      # resource path
      local_var_path = "/zacks/forward_pe"

      # query parameters
      query_params = {}
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseZacksForwardPEs')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZacksApi#get_zacks_forward_pe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Zacks Forward PE by identifer
    # Returns the forward PE estimates for the identifier
    # @param identifier An Intrinio ID or ticker for a Security
    # @param [Hash] opts the optional parameters
    # @return [ZacksForwardPE]
    def get_zacks_forward_pe_by_identifier(identifier, opts = {})
      data, _status_code, _headers = get_zacks_forward_pe_by_identifier_with_http_info(identifier, opts)
      return data
    end

    # Zacks Forward PE by identifer
    # Returns the forward PE estimates for the identifier
    # @param identifier An Intrinio ID or ticker for a Security
    # @param [Hash] opts the optional parameters
    # @return [Array<(ZacksForwardPE, Fixnum, Hash)>] ZacksForwardPE data, response status code and response headers
    def get_zacks_forward_pe_by_identifier_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZacksApi.get_zacks_forward_pe_by_identifier ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling ZacksApi.get_zacks_forward_pe_by_identifier"
      end
      # resource path
      local_var_path = "/zacks/forward_pe/{identifier}".sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ZacksForwardPE')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZacksApi#get_zacks_forward_pe_by_identifier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Zacks Institutional Holding Companies
    # Returns Zacks institutional holding companies data
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ticker Return companies with the given ticker
    # @option opts [Integer] :page_size The number of results to return (default to 100)
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseZacksInstitutionalHoldingCompanies]
    def get_zacks_institutional_holding_companies(opts = {})
      data, _status_code, _headers = get_zacks_institutional_holding_companies_with_http_info(opts)
      return data
    end

    # Zacks Institutional Holding Companies
    # Returns Zacks institutional holding companies data
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ticker Return companies with the given ticker
    # @option opts [Integer] :page_size The number of results to return
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseZacksInstitutionalHoldingCompanies, Fixnum, Hash)>] ApiResponseZacksInstitutionalHoldingCompanies data, response status code and response headers
    def get_zacks_institutional_holding_companies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZacksApi.get_zacks_institutional_holding_companies ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ZacksApi.get_zacks_institutional_holding_companies, must be smaller than or equal to 10000.'
      end

      # resource path
      local_var_path = "/zacks/institutional_holdings/companies"

      # query parameters
      query_params = {}
      query_params[:'ticker'] = opts[:'ticker'] if !opts[:'ticker'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseZacksInstitutionalHoldingCompanies')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZacksApi#get_zacks_institutional_holding_companies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Zacks Institutional Holding Owners
    # Returns Zacks institutional holding owners data
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cik Return owners with the given Central Index Key (CIK)
    # @option opts [Integer] :page_size The number of results to return (default to 100)
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseZacksInstitutionalHoldingOwners]
    def get_zacks_institutional_holding_owners(opts = {})
      data, _status_code, _headers = get_zacks_institutional_holding_owners_with_http_info(opts)
      return data
    end

    # Zacks Institutional Holding Owners
    # Returns Zacks institutional holding owners data
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cik Return owners with the given Central Index Key (CIK)
    # @option opts [Integer] :page_size The number of results to return
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseZacksInstitutionalHoldingOwners, Fixnum, Hash)>] ApiResponseZacksInstitutionalHoldingOwners data, response status code and response headers
    def get_zacks_institutional_holding_owners_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZacksApi.get_zacks_institutional_holding_owners ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ZacksApi.get_zacks_institutional_holding_owners, must be smaller than or equal to 10000.'
      end

      # resource path
      local_var_path = "/zacks/institutional_holdings/owners"

      # query parameters
      query_params = {}
      query_params[:'cik'] = opts[:'cik'] if !opts[:'cik'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseZacksInstitutionalHoldingOwners')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZacksApi#get_zacks_institutional_holding_owners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Zacks Institutional Holdings
    # Returns Zacks institutional holdings data
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ticker Return holdings where the company being held has the given ticker
    # @option opts [String] :owner_cik Return holdings where the owner/holder has the given Central Index Key (CIK)
    # @option opts [Integer] :page_size The number of results to return (default to 100)
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseZacksInstitutionalHoldings]
    def get_zacks_institutional_holdings(opts = {})
      data, _status_code, _headers = get_zacks_institutional_holdings_with_http_info(opts)
      return data
    end

    # Zacks Institutional Holdings
    # Returns Zacks institutional holdings data
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ticker Return holdings where the company being held has the given ticker
    # @option opts [String] :owner_cik Return holdings where the owner/holder has the given Central Index Key (CIK)
    # @option opts [Integer] :page_size The number of results to return
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseZacksInstitutionalHoldings, Fixnum, Hash)>] ApiResponseZacksInstitutionalHoldings data, response status code and response headers
    def get_zacks_institutional_holdings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZacksApi.get_zacks_institutional_holdings ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ZacksApi.get_zacks_institutional_holdings, must be smaller than or equal to 10000.'
      end

      # resource path
      local_var_path = "/zacks/institutional_holdings"

      # query parameters
      query_params = {}
      query_params[:'ticker'] = opts[:'ticker'] if !opts[:'ticker'].nil?
      query_params[:'owner_cik'] = opts[:'owner_cik'] if !opts[:'owner_cik'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseZacksInstitutionalHoldings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZacksApi#get_zacks_institutional_holdings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Zacks Long Term Growth Rates
    # This database offers consensus long term growth rate estimates, including insight into changes in estimates and revisions over time.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
    # @option opts [Integer] :page_size The number of results to return (default to 100)
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseZacksLongTermGrowthRates]
    def get_zacks_long_term_growth_rates(opts = {})
      data, _status_code, _headers = get_zacks_long_term_growth_rates_with_http_info(opts)
      return data
    end

    # Zacks Long Term Growth Rates
    # This database offers consensus long term growth rate estimates, including insight into changes in estimates and revisions over time.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
    # @option opts [Integer] :page_size The number of results to return
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseZacksLongTermGrowthRates, Fixnum, Hash)>] ApiResponseZacksLongTermGrowthRates data, response status code and response headers
    def get_zacks_long_term_growth_rates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZacksApi.get_zacks_long_term_growth_rates ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ZacksApi.get_zacks_long_term_growth_rates, must be smaller than or equal to 10000.'
      end

      # resource path
      local_var_path = "/zacks/long_term_growth_rates"

      # query parameters
      query_params = {}
      query_params[:'identifier'] = opts[:'identifier'] if !opts[:'identifier'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseZacksLongTermGrowthRates')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZacksApi#get_zacks_long_term_growth_rates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Zacks Sales Estimates
    # This database offers consensus sales estimates for over 5,000 US and Canadian listed companies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier A Company identifier (Ticker, CIK, LEI, Intrinio ID)
    # @option opts [Date] :start_date Limit Sales estimates to those on or after this date
    # @option opts [Date] :end_date Limit Sales estimates to those on or before this date
    # @option opts [Integer] :fiscal_year Only for the given fiscal year
    # @option opts [String] :fiscal_period The fiscal period
    # @option opts [Integer] :calendar_year Only for the given calendar year
    # @option opts [String] :calendar_period The calendar period
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @option opts [Integer] :page_size The number of results to return (default to 100)
    # @option opts [String] :next_page2 Gets the next page of data from a previous API call
    # @return [ApiResponseZacksSalesEstimates]
    def get_zacks_sales_estimates(opts = {})
      data, _status_code, _headers = get_zacks_sales_estimates_with_http_info(opts)
      return data
    end

    # Zacks Sales Estimates
    # This database offers consensus sales estimates for over 5,000 US and Canadian listed companies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier A Company identifier (Ticker, CIK, LEI, Intrinio ID)
    # @option opts [Date] :start_date Limit Sales estimates to those on or after this date
    # @option opts [Date] :end_date Limit Sales estimates to those on or before this date
    # @option opts [Integer] :fiscal_year Only for the given fiscal year
    # @option opts [String] :fiscal_period The fiscal period
    # @option opts [Integer] :calendar_year Only for the given calendar year
    # @option opts [String] :calendar_period The calendar period
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @option opts [Integer] :page_size The number of results to return
    # @option opts [String] :next_page2 Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseZacksSalesEstimates, Fixnum, Hash)>] ApiResponseZacksSalesEstimates data, response status code and response headers
    def get_zacks_sales_estimates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZacksApi.get_zacks_sales_estimates ..."
      end
      if @api_client.config.client_side_validation && opts[:'fiscal_period'] && !['Q1TTM', 'Q2TTM', 'Q3TTM', 'FY', 'Q1', 'Q2', 'Q3', 'Q4', 'Q2YTD', 'Q3YTD'].include?(opts[:'fiscal_period'])
        fail ArgumentError, 'invalid value for "fiscal_period", must be one of Q1TTM, Q2TTM, Q3TTM, FY, Q1, Q2, Q3, Q4, Q2YTD, Q3YTD'
      end
      if @api_client.config.client_side_validation && opts[:'calendar_period'] && !['Q1TTM', 'Q2TTM', 'Q3TTM', 'FY', 'Q1', 'Q2', 'Q3', 'Q4', 'Q2YTD', 'Q3YTD'].include?(opts[:'calendar_period'])
        fail ArgumentError, 'invalid value for "calendar_period", must be one of Q1TTM, Q2TTM, Q3TTM, FY, Q1, Q2, Q3, Q4, Q2YTD, Q3YTD'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ZacksApi.get_zacks_sales_estimates, must be smaller than or equal to 10000.'
      end

      # resource path
      local_var_path = "/zacks/sales_estimates"

      # query parameters
      query_params = {}
      query_params[:'identifier'] = opts[:'identifier'] if !opts[:'identifier'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'fiscal_year'] = opts[:'fiscal_year'] if !opts[:'fiscal_year'].nil?
      query_params[:'fiscal_period'] = opts[:'fiscal_period'] if !opts[:'fiscal_period'].nil?
      query_params[:'calendar_year'] = opts[:'calendar_year'] if !opts[:'calendar_year'].nil?
      query_params[:'calendar_period'] = opts[:'calendar_period'] if !opts[:'calendar_period'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page'] = opts[:'next_page2'] if !opts[:'next_page2'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseZacksSalesEstimates')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZacksApi#get_zacks_sales_estimates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Zacks Sales Surprises
    # This database returns historical estimated and actual sales, guidance, and announcement dates for 17,000+ US and Canadian listed companies.
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :start_date Limit sales surprises to those on or after this date
    # @option opts [Date] :end_date Limit sales surprises to those on or before this date
    # @option opts [Float] :sales_actual_greater Return only records with an actual sales higher than this value
    # @option opts [Float] :sales_actual_less Return only records with an actual sales lower than this value
    # @option opts [Float] :sales_mean_estimate_greater Return only records with a sales mean estimate greater than this value
    # @option opts [Float] :sales_mean_estimate_less Return only records with a sales mean estimate lower than this value
    # @option opts [Float] :sales_amount_diff_greater Return only records with a sales amount difference greater than this value
    # @option opts [Float] :sales_amount_diff_less Return only records with a sales amount difference less than this value
    # @option opts [Float] :sales_percent_diff_greater Return only records with a sales percent difference greater than this value
    # @option opts [Float] :sales_percent_diff_less Return only records with a sales percent difference less than this value
    # @option opts [Float] :sales_count_estimate_greater Return only records with a sales count estimate greater than this value
    # @option opts [Float] :sales_count_estimate_less Return only records with a sales count estimate less than this value
    # @option opts [Float] :sales_std_dev_estimate_greater Return only records with a sales standard deviation greater than this value
    # @option opts [Float] :sales_std_dev_estimate_less Return only records with a sales standard deviation less than this value
    # @option opts [Integer] :page_size The number of results to return (default to 100)
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseZacksSalesSurprises]
    def get_zacks_sales_surprises(opts = {})
      data, _status_code, _headers = get_zacks_sales_surprises_with_http_info(opts)
      return data
    end

    # Zacks Sales Surprises
    # This database returns historical estimated and actual sales, guidance, and announcement dates for 17,000+ US and Canadian listed companies.
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :start_date Limit sales surprises to those on or after this date
    # @option opts [Date] :end_date Limit sales surprises to those on or before this date
    # @option opts [Float] :sales_actual_greater Return only records with an actual sales higher than this value
    # @option opts [Float] :sales_actual_less Return only records with an actual sales lower than this value
    # @option opts [Float] :sales_mean_estimate_greater Return only records with a sales mean estimate greater than this value
    # @option opts [Float] :sales_mean_estimate_less Return only records with a sales mean estimate lower than this value
    # @option opts [Float] :sales_amount_diff_greater Return only records with a sales amount difference greater than this value
    # @option opts [Float] :sales_amount_diff_less Return only records with a sales amount difference less than this value
    # @option opts [Float] :sales_percent_diff_greater Return only records with a sales percent difference greater than this value
    # @option opts [Float] :sales_percent_diff_less Return only records with a sales percent difference less than this value
    # @option opts [Float] :sales_count_estimate_greater Return only records with a sales count estimate greater than this value
    # @option opts [Float] :sales_count_estimate_less Return only records with a sales count estimate less than this value
    # @option opts [Float] :sales_std_dev_estimate_greater Return only records with a sales standard deviation greater than this value
    # @option opts [Float] :sales_std_dev_estimate_less Return only records with a sales standard deviation less than this value
    # @option opts [Integer] :page_size The number of results to return
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseZacksSalesSurprises, Fixnum, Hash)>] ApiResponseZacksSalesSurprises data, response status code and response headers
    def get_zacks_sales_surprises_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZacksApi.get_zacks_sales_surprises ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ZacksApi.get_zacks_sales_surprises, must be smaller than or equal to 10000.'
      end

      # resource path
      local_var_path = "/zacks/sales_surprises"

      # query parameters
      query_params = {}
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'sales_actual_greater'] = opts[:'sales_actual_greater'] if !opts[:'sales_actual_greater'].nil?
      query_params[:'sales_actual_less'] = opts[:'sales_actual_less'] if !opts[:'sales_actual_less'].nil?
      query_params[:'sales_mean_estimate_greater'] = opts[:'sales_mean_estimate_greater'] if !opts[:'sales_mean_estimate_greater'].nil?
      query_params[:'sales_mean_estimate_less'] = opts[:'sales_mean_estimate_less'] if !opts[:'sales_mean_estimate_less'].nil?
      query_params[:'sales_amount_diff_greater'] = opts[:'sales_amount_diff_greater'] if !opts[:'sales_amount_diff_greater'].nil?
      query_params[:'sales_amount_diff_less'] = opts[:'sales_amount_diff_less'] if !opts[:'sales_amount_diff_less'].nil?
      query_params[:'sales_percent_diff_greater'] = opts[:'sales_percent_diff_greater'] if !opts[:'sales_percent_diff_greater'].nil?
      query_params[:'sales_percent_diff_less'] = opts[:'sales_percent_diff_less'] if !opts[:'sales_percent_diff_less'].nil?
      query_params[:'sales_count_estimate_greater'] = opts[:'sales_count_estimate_greater'] if !opts[:'sales_count_estimate_greater'].nil?
      query_params[:'sales_count_estimate_less'] = opts[:'sales_count_estimate_less'] if !opts[:'sales_count_estimate_less'].nil?
      query_params[:'sales_std_dev_estimate_greater'] = opts[:'sales_std_dev_estimate_greater'] if !opts[:'sales_std_dev_estimate_greater'].nil?
      query_params[:'sales_std_dev_estimate_less'] = opts[:'sales_std_dev_estimate_less'] if !opts[:'sales_std_dev_estimate_less'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseZacksSalesSurprises')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZacksApi#get_zacks_sales_surprises\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Zacks Target Price Consensuses
    # Returns the latest Zacks target price consensus data
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier Filings for the given &#x60;company&#x60; identifier (ticker, CIK, LEI, Intrinio ID)
    # @option opts [String] :industry_group_number Return only growth rates for companies in the given Zacks industry group number
    # @option opts [Integer] :page_size The number of results to return (default to 100)
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseZacksTargetPriceConsensuses]
    def get_zacks_target_price_consensuses(opts = {})
      data, _status_code, _headers = get_zacks_target_price_consensuses_with_http_info(opts)
      return data
    end

    # Zacks Target Price Consensuses
    # Returns the latest Zacks target price consensus data
    # @param [Hash] opts the optional parameters
    # @option opts [String] :identifier Filings for the given &#x60;company&#x60; identifier (ticker, CIK, LEI, Intrinio ID)
    # @option opts [String] :industry_group_number Return only growth rates for companies in the given Zacks industry group number
    # @option opts [Integer] :page_size The number of results to return
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseZacksTargetPriceConsensuses, Fixnum, Hash)>] ApiResponseZacksTargetPriceConsensuses data, response status code and response headers
    def get_zacks_target_price_consensuses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZacksApi.get_zacks_target_price_consensuses ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ZacksApi.get_zacks_target_price_consensuses, must be smaller than or equal to 10000.'
      end

      # resource path
      local_var_path = "/zacks/target_price_consensuses"

      # query parameters
      query_params = {}
      query_params[:'identifier'] = opts[:'identifier'] if !opts[:'identifier'].nil?
      query_params[:'industry_group_number'] = opts[:'industry_group_number'] if !opts[:'industry_group_number'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseZacksTargetPriceConsensuses')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZacksApi#get_zacks_target_price_consensuses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
